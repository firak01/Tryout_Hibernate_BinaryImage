<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>

<session-factory>
	<!-- Im Code wird die Konfiguration aber durch Java-Befehle erstellt und diese hier nicht verwendet -->
	
	<!--  Echo all SQL to stdout -->
	<property name="show_sql">true</property>
	<property name="format_sql">true</property>
	
	<!--  <property name="dialect">org.hibernate.dialect.SQLiteDialect</property> -->
	
	
	<!-- wohl eine etwas ältere Version, aber nur 1 .jar Datei und vielleicht auch mit einer alten Java Version 1.6 nutzbar! -->
	<!-- <property name="dialect">tryout.hibernate.dialect.SQLiteDialect</property> --> 
	
	<!-- Per Maven einbundene 'neuerer' Dialekt -->
	<property name="dialect">com.enigmabridge.hibernate.dialect.SQLiteDialect</property>
	
	
	<!-- Database Connection settings -->
	<property name="connection.driver_class">org.sqlite.JDBC</property>
	<property name="connection.url">jdbc:sqlite:c:\\server\\SQLite\\TryOutHibernateBinaryImage001.sqlite</property>
	<property name="connection.username"></property>
	<property name="connection.password"></property>
	
	<!-- Enable Hibernates autamatic session context management -->
	<property name="current_session_context_class">thread</property>
	
	<!-- disable the second-level cache -->
	<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>
	
	<!-- drop and recreate database schema on startup-->
	<!-- FGL 20131124: Umgeändert auf create, erstellt damit automatisch die Datenbank,
	     ABER: keine Updates. Daher im Code (...main... -Klasse) die Konfiguration "übersteuert" mit dem Parameter UPDATE
	     Bzw. in diesem Fall wird im Code keine Konfiguration vewendet, daher bleibt es bei UPDATE. -->
	<property name="hibernate.hbm2ddl.auto">update</property>
		
	<!-- NEU: Versuche es zu ermoeglichen, dass Streams für das speichern als Blob erlaubt sind. -->
	<property name="hibernate.jdbc.use_streams_for_binary">true</property>
	
		
	<!-- FGL: So werden die Klassen für das Mapping herangezogen, aber: Dabei werden Annotations verwendet. 
	Merke: Jede hier genannte Klasse muss auch existieren, sonst fehler 
	       Exception in thread "main" org.hibernate.MappingException: Could not determine type for: tryout.hibernate.enumeration.USState003-->	
	<mapping class="tryout.hibernate.HexCell"></mapping>
		
	<!-- FGL 20131124: Darun unterscheidet sich dieses Beispiel von den vorherigen, es wird einen Konigurationsdatei für das Mapping verwendet -->
	<!--  <mapping resource="tryout/hibernate/Person.hbm.xml"/> -->
	
	<!--  es dürfen hier nur Klassen genannt werden, die auch gefunden werden
	<mapping class="tryout.hibernate.Person"/>
 		<mapping class="tryout.hibernate.Employee"/>
 		<mapping class="tryout.hibernate.Owner"/>
 	-->
	
</session-factory>
	
    
</hibernate-configuration>